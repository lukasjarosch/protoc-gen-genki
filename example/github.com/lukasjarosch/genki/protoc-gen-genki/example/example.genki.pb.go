// Code generated by protoc-gen-genki. DO NOT EDIT.
// source: example.proto

package example

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	genkiGrpcClient "github.com/lukasjarosch/genki/client/grpc"
	genkiMeta "github.com/lukasjarosch/genki/metadata"
	"github.com/spf13/pflag"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ExampleServiceGenkiClient struct {
	cc      *genkiGrpcClient.Client
	service ExampleServiceClient
}

func NewExampleServiceGenkiClient(address string) *ExampleServiceGenkiClient {
	c := genkiGrpcClient.NewClientWithAddress("exampleservice", address)
	return &ExampleServiceGenkiClient{
		cc:      c,
		service: NewExampleServiceClient(c.Connection()),
	}
}

// Foo will call genki.example.ExampleService.Foo()
func (client *ExampleServiceGenkiClient) Foo(ctx context.Context, request *FooRequest) (response *FooResponse, err error) {
	ctx = genkiMeta.NewOutgoingContext(ctx)
	req, err := client.service.Foo(ctx, request)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// Bar will call genki.example.ExampleService.Bar()
func (client *ExampleServiceGenkiClient) Bar(ctx context.Context, request *BarRequest) (response *BarResponse, err error) {
	ctx = genkiMeta.NewOutgoingContext(ctx)
	req, err := client.service.Bar(ctx, request)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// Connect is a wrapper to the underlying genki client Connect() call
func (client *ExampleServiceGenkiClient) Connect() (err error) {
	return client.cc.Connect()
}

// Connection is a wrapper to the underlying genki client Connection() call
func (client *ExampleServiceGenkiClient) Connection() *grpc.ClientConn {
	return client.cc.Connection()
}

// Disconnect is a wrapper to the underlying genki client Disconnect() call
func (client *ExampleServiceGenkiClient) Disconnect() {
	client.cc.Disconnect()
}

// Flags is a wrapper to the underlying genki client Flags() call
func (client *ExampleServiceGenkiClient) Flags() *pflag.FlagSet {
	return client.cc.Flags()
}
